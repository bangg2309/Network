package server;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.StringTokenizer;

public class ServerProcess extends Thread {
	private Socket socket;
	private BufferedReader netIn;
	private PrintWriter netOut;

	public ServerProcess(Socket socket) throws IOException {
		super();
		this.socket = socket;
		this.netIn = new BufferedReader(new InputStreamReader(socket.getInputStream()));
		this.netOut = new PrintWriter(socket.getOutputStream(), true);
	}

	@Override
	public void run() {
		netOut.println("Welcom to File Management");
		String folderDefault = "";
		while (true) {
			try {
				String command = netIn.readLine();
				if (command.equals("QUIT"))
					break;
				StringTokenizer st = new StringTokenizer(command, "|");
				String commandName = st.nextToken();
				String path, file, sourceFile, destFile;
				boolean rs;
				switch (commandName) {
				case "SET_FOLDER":
					path = st.nextToken();
					if (isFolder(path)) {
						folderDefault = path;
						netOut.println("OK");
					} else {
						netOut.println("ERROR");
					}
					break;
				case "VIEW":
					String fileOrPath = st.nextToken();
					if (isFolder(fileOrPath)) {
						getPathAndFile(fileOrPath);
					} else if (isFile(folderDefault, fileOrPath)) {

					}
					break;
				case "COPY":

					break;
				case "MOVE":

					break;
				case "RENAME":

					break;

				default:
					netOut.println("Command khong hop le");
					break;
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		try {
			socket.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void getPathAndFile() {

	}

	private boolean isFolder(String path) {
		File file = new File(path);
		return file.isDirectory();

	}

	private boolean isFile(String path, String fileName) {
		String file = path + File.separator + fileName;
		return new File(file).isFile();
	}

}
